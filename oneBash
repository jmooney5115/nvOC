#!/bin/bash

# nvOC v0017 by fullzero
#
# Open a terminal to launch miner; will auto launch on boot
#
# firefox has an OP bookmark; look at the OP for more information
#
# click the Desktop Sharing icon on the left for RDP 
#
# your rig IP displays at beginning of mining process
#
# worker names will default to your rig host address (last 3 digits of rig IP)
#
# USE ALL CAPS
#
# CHOOSE COIN FROM:
# ZEC   ZCOIN  HUSH   ZEN  ZCL  
# NICE  ETH    MUSIC  ETC  EXP  DCR  PASC
# MONA  VTC    DGB    SIA  FTC  LBC  
# DUAL_ETC_DCR    DUAL_ETC_PASC    DUAL_ETC_LBC    DUAL_ETC_SC
# DUAL_EXP_DCR    DUAL_EXP_PASC    DUAL_EXP_LBC    DUAL_EXP_SC
# DUAL_ETH_DCR    DUAL_ETH_PASC    DUAL_ETH_LBC    DUAL_ETH_SC
# DUAL_MUSIC_DCR  DUAL_MUSIC_PASC  DUAL_MUSIC_LBC  DUAL_MUSIC_SC

COIN="NICE"

TEAMVIEWER="NO"                 # YES NO

SSH="YES"                       # YES NO

POWERLIMIT="NO"              	# YES NO

POWERLIMIT_WATTS=125

__CORE_OVERCLOCK=100
MEMORY_OVERCLOCK=100

MANUAL_FAN="YES"             	# YES NO

# Set fan speed if MANUAL_FAN="YES"
FAN_SPEED=75

# If you are using a slow USB Key
SLOW_USB_KEY_MODE="NO"        	# YES NO

# Mine XMR with CPU
plusCPU="NO"		        # YES NO

# Number of threads for plusCPU
threadCOUNT="1"                 # varies per CPU


INDIVIDUAL_CLOCKS="NO"      	# YES NO

# Set individual clocks here if INDIVIDUAL_CLOCKS="YES"
__CORE_OVERCLOCK_0=100
MEMORY_OVERCLOCK_0=100

__CORE_OVERCLOCK_1=100
MEMORY_OVERCLOCK_1=100

__CORE_OVERCLOCK_2=100
MEMORY_OVERCLOCK_2=100

__CORE_OVERCLOCK_3=100
MEMORY_OVERCLOCK_3=100

__CORE_OVERCLOCK_4=100
MEMORY_OVERCLOCK_4=100

__CORE_OVERCLOCK_5=100
MEMORY_OVERCLOCK_5=100

__CORE_OVERCLOCK_6=100
MEMORY_OVERCLOCK_6=100

__CORE_OVERCLOCK_7=100
MEMORY_OVERCLOCK_7=100

__CORE_OVERCLOCK_8=100
MEMORY_OVERCLOCK_8=100

__CORE_OVERCLOCK_9=100
MEMORY_OVERCLOCK_9=100

__CORE_OVERCLOCK_10=100
MEMORY_OVERCLOCK_10=100

__CORE_OVERCLOCK_11=100
MEMORY_OVERCLOCK_11=100

__CORE_OVERCLOCK_12=100
MEMORY_OVERCLOCK_12=100

__CORE_OVERCLOCK_13=100
MEMORY_OVERCLOCK_13=100


INDIVIDUAL_POWERLIMIT="NO"   	# YES NO

# Set individual powerlimits here if INDIVIDUAL_POWERLIMIT="YES"
INDIVIDUAL_POWERLIMIT_0=125

INDIVIDUAL_POWERLIMIT_1=125

INDIVIDUAL_POWERLIMIT_2=125

INDIVIDUAL_POWERLIMIT_3=125

INDIVIDUAL_POWERLIMIT_4=125

INDIVIDUAL_POWERLIMIT_5=125

INDIVIDUAL_POWERLIMIT_6=125

INDIVIDUAL_POWERLIMIT_7=125

INDIVIDUAL_POWERLIMIT_8=125

INDIVIDUAL_POWERLIMIT_9=125

INDIVIDUAL_POWERLIMIT_10=125

INDIVIDUAL_POWERLIMIT_11=125

INDIVIDUAL_POWERLIMIT_12=125

INDIVIDUAL_POWERLIMIT_13=125


# change EWBF_PERCENT to alter donation percent for EWBF Miner
EWBF_PERCENT=0


# IP as worker implementation
########################################################################################
IPW=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
# for_full_IP with _ instead of .
#IP_AS_WORKER=$(echo $IPW | sed 'y/./_/')
echo ""
# using only host address
IP_AS_WORKER=$(echo -n $IPW | tail -c -3)
echo workername: $IP_AS_WORKER
########################################################################################


# set YOUR ADDRESSES, WORKERS, POOL and PORT:
ZEC_WORKER="$IP_AS_WORKER"
ZEC_ADDRESS="t1XfkZUZWME8FnRiFxHZQAQ2K1UdQMbshJp"
ZEC_POOL="zec-us-east1.nanopool.org"
ZEC_PORT="6666"


EWBF_VERSION="3_4"  # choose 3_3  or  3_4


ZCL_WORKER="$IP_AS_WORKER"
ZCL_ADDRESS="fullzero22"
ZCL_POOL="zcl.coinmine.pl"
ZCL_PORT="7007"

ZEN_WORKER="$IP_AS_WORKER"
ZEN_ADDRESS="znictSisUCALijmhJrjLS8FozvcJRAiHc29"
ZEN_POOL="us.zenmine.pro"
ZEN_PORT="9009"

HUSH_WORKER="$IP_AS_WORKER"
HUSH_ADDRESS="fullzero22"
HUSH_POOL="zdash.suprnova.cc"
HUSH_PORT="4048"

ZCOIN_WORKER="$IP_AS_WORKER"
ZCOIN_ADDRESS="fullzero22"
ZCOIN_POOL="stratum+tcp://xzc.suprnova.cc:1569"

MONA_WORKER="$IP_AS_WORKER"
MONA_ADDRESS="fullzero22"
MONA_POOL="stratum+tcp://mona.suprnova.cc:2995"

# if YES ensure you update BTC_ADDRESS
VTC_AUTOCONVERT_TO_BTC="YES"        #YES  NO
VTC_WORKER="$IP_AS_WORKER"
VTC_ADDRESS="VsvtYL2mz3YFM3fpt5pb28zHodTbnJodRc"
VTC_POOL="stratum+tcp://lyra2v2.mine.zpool.ca:4533"

BTC_ADDRESS="18Y5HYe3BAwAhTAkFLbD52o8NqtrN3DtpF"

# NICE autoconverts to BTC: ensure you update BTC_ADDRESS if you use NICE
NICE_WORKER="$IP_AS_WORKER"
NICE_POOL="stratum+tcp://daggerhashimoto.usa.nicehash.com:3353"
GENOIL_NICE_POOL="daggerhashimoto.usa.nicehash.com:3353"
NICE_EXTENTION_ARGUMENTS=""   # add any additional claymore arguments desired here

# if YES ensure you update BTC_ADDRESS
DGB_AUTOCONVERT_TO_BTC="YES"        #YES  NO
DGB_INTENSITY=26
DGB_ADDRESS="DKhCswL8Ff5UyZWdVEbyUVvDhLYMmfVLP7"
DGB_POOL="stratum+tcp://skein.mine.zpool.ca:4933"

LBC_WORKER="$IP_AS_WORKER"
LBC_ADDRESS="fullzero22"
LBC_POOL="stratum+tcp://lbry.suprnova.cc:6256"

FTC_WORKER="$IP_AS_WORKER"
FTC_ADDRESS="fullzero22"
FTC_POOL="stratum+tcp://coinotron.com:3337"


USE_ENVIRONMENTAL_VARIBLES="NO"   #YES  NO

ETHERMINEdotORG="NO"

CLAYMORE_VERSION="9_5"    # choose 9_5  or  9_4  or  8_0

GENOILorCLAYMORE="GENOIL"  # choose GENOIL  or  CLAYMORE


ETH_WORKER="$IP_AS_WORKER"
ETH_ADDRESS="0xe12bdd454997e443ec0cae6bebb6bb3c74242aae"
ETH_POOL="eth-us-east1.nanopool.org:9999"
ETH_EXTENTION_ARGUMENTS=""    # add any additional claymore arguments desired here

ETC_WORKER="$IP_AS_WORKER"
ETC_ADDRESS="0xc3eab16bd575e5498efef2b038c8c178598d659e"
ETC_POOL="etc-us-east1.nanopool.org:19999"
ETC_EXTENTION_ARGUMENTS=""    # add any additional claymore arguments desired here

EXP_WORKER="$IP_AS_WORKER"
EXP_ADDRESS="0xa7108c64e6fec3193091f2cae2a5c62a36d4396a"
EXP_POOL="exp-us.dwarfpool.com:8018"
EXP_EXTENTION_ARGUMENTS=""    # add any additional claymore arguments desired here

MUSIC_WORKER="$IP_AS_WORKER"
MUSIC_ADDRESS="0x48919b296f648bd2edfeb6f336d2b3f66a741ea5"
MUSIC_POOL="stratum+tcp://213.154.202.174:3334"
MUSIC_EXTENTION_ARGUMENTS=""    # add any additional claymore arguments desired here

SC_WORKER="$IP_AS_WORKER"
SC_ADDRESS="1569a3353bb3353aedc6e0b79e796787ffcbe45d6caaa28f678ba74a5c50fdb02e735244e706"
SC_POOL="sia-us-east1.nanopool.org:7777"
SC_GW_POOL="sia-us-east1.nanopool.org:9980"

DCR_WORKER="$IP_AS_WORKER"
DCR_ADDRESS="fullzero22"
DCR_POOL="stratum+tcp://dcr.suprnova.cc:3252"

PASC_WORKER="$IP_AS_WORKER"
PASC_ADDRESS="86646-64.b12a9833f216b5a8"
PASC_POOL="pasc-us-east1.nanopool.org:15555"

# if plusCPU is "YES" replace with your XMR info
XMR_WORKER="$IP_AS_WORKER"
XMR_ADDRESS="47sghzufGhJJDQEbScMCwVBimTuq6L5JiRixD8VeGbpjCTA12noXmi4ZyBZLc99e66NtnKff34fHsGRoyZk3ES1s1V4QVcB.23d5f83d0021a50d8f809f4727c8622d3ea25798942bcb1ba0eee40cc157f65c"
XMR_POOL="stratum+tcp://xmr-us-east1.nanopool.org:14444"

#  settings above: ALL ADJUSTABLE SETINGS ABOVE THIS LINE
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#  implementation below: NO SETTINGS BELOW

XORG="FAIL"

if grep -q "28800" /etc/X11/xorg.conf;
then
XORG="OK"
fi

sudo ldconfig /usr/local/cuda/lib64
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $XORG == "FAIL" ]
then
sudo cp '/etc/X11/xorg.conf.backup' '/etc/X11/xorg.conf'
echo ''
echo "Xorg PROBLEM DETECTED"
echo ''
echo "Restoring Xorg"
echo ''
echo "Rebooting in 5"
sleep 5
sudo reboot
fi

IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')

echo ''
echo rig IP: $IP

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $USE_ENVIRONMENTAL_VARIBLES == "YES" ]
then
export GPU_FORCE_64BIT_PTR="0"
export GPU_MAX_HEAP_SIZE="100"
export GPU_USE_SYNC_OBJECTS="1"
export GPU_MAX_ALLOC_PERCENT="100"
echo ""
echo ENVIRONMENTAL VARIBLES SET
fi

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $POWERLIMIT == "YES" ]
then
sudo nvidia-smi -pl $POWERLIMIT_WATTS
fi

if [ $INDIVIDUAL_POWERLIMIT == "YES" ]
then
sudo nvidia-smi -i 0 -pl $INDIVIDUAL_POWERLIMIT_0
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 1 -pl $INDIVIDUAL_POWERLIMIT_1
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 2 -pl $INDIVIDUAL_POWERLIMIT_2
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 3 -pl $INDIVIDUAL_POWERLIMIT_3
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 4 -pl $INDIVIDUAL_POWERLIMIT_4
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 5 -pl $INDIVIDUAL_POWERLIMIT_5
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 6 -pl $INDIVIDUAL_POWERLIMIT_6
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 7 -pl $INDIVIDUAL_POWERLIMIT_7
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 8 -pl $INDIVIDUAL_POWERLIMIT_8
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 9 -pl $INDIVIDUAL_POWERLIMIT_9
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 10 -pl $INDIVIDUAL_POWERLIMIT_10
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 11 -pl $INDIVIDUAL_POWERLIMIT_11
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 12 -pl $INDIVIDUAL_POWERLIMIT_12
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
sudo nvidia-smi -i 13 -pl $INDIVIDUAL_POWERLIMIT_13
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
fi

if [ $TEAMVIEWER == "YES" ]
then
sudo teamviewer --daemon enable
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
fi

if [ $TEAMVIEWER == "NO" ]
then
sudo teamviewer --daemon disable
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
fi

if [ $SSH == "YES" ]
then
sudo cp '/etc/init/ssh.conf-on' '/etc/init/ssh.conf'
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
fi

if [ $SSH == "NO" ]
then
sudo cp '/etc/init/ssh.conf-off' '/etc/init/ssh.conf'
if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi
fi

if [ $plusCPU == "YES" ]
then
HCD='/home/m1/cpuOPT/cpuminer'
XMRADDR="$XMR_ADDRESS.$XMR_WORKER"
guake -r $HCD -e "$HCD -a cryptonight -o $XMR_POOL -u $XMRADDR -p x -t $threadCOUNT"
fi

___1050_or_1050ti="NO"

NORMAL="NO"

nvidia-smi -L > /tmp/tempa

if grep -q "1050" /tmp/tempa;
then
___1050_or_1050ti="YES"
fi

if grep -q "1060" /tmp/tempa;
then
NORMAL="YES"
fi

if grep -q "1070" /tmp/tempa;
then
NORMAL="YES"
fi

if grep -q "1080" /tmp/tempa;
then
NORMAL="YES"
fi

if grep -q "1080ti" /tmp/tempa;
then
NORMAL="YES"
fi

rm /tmp/tempa

if [ "$FAN_SPEED" -lt "40" ]
then
    FAN_SPEED=40
fi

GPUS=$(nvidia-smi --query-gpu=count --format=csv,noheader,nounits | tail -1)

NVD=nvidia-settings

if [ $INDIVIDUAL_CLOCKS == "NO" ]
then
__CORE_OVERCLOCK_0=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_0=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_1=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_1=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_2=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_2=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_3=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_3=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_4=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_4=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_5=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_5=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_6=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_6=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_7=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_7=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_8=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_8=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_9=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_9=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_10=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_10=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_11=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_11=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_12=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_12=$MEMORY_OVERCLOCK
__CORE_OVERCLOCK_13=$__CORE_OVERCLOCK
MEMORY_OVERCLOCK_13=$MEMORY_OVERCLOCK
fi

TI="3"

if [ $___1050_or_1050ti == "YES" ]
then
    TI="2"
if [ $NORMAL == "YES" ]
then
    TI="2 3"
fi
fi

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

for j in $TI
  do
    ${NVD} -a [gpu:0]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_0}
    ${NVD} -a [gpu:0]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_0}

if [ $GPUS == 2 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
fi

if [ $GPUS == 3 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
fi

if [ $GPUS == 4 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
fi

if [ $GPUS == 5 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
fi

if [ $GPUS == 6 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
fi

if [ $GPUS == 7 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
fi

if [ $GPUS == 8 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
fi

if [ $GPUS == 9 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
fi

if [ $GPUS == 10 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
    ${NVD} -a [gpu:9]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_9}
    ${NVD} -a [gpu:9]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_9}
fi

if [ $GPUS == 11 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
    ${NVD} -a [gpu:9]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_9}
    ${NVD} -a [gpu:9]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_9}
    ${NVD} -a [gpu:10]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_10}
    ${NVD} -a [gpu:10]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_10}
fi

if [ $GPUS == 12 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
    ${NVD} -a [gpu:9]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_9}
    ${NVD} -a [gpu:9]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_9}
    ${NVD} -a [gpu:10]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_10}
    ${NVD} -a [gpu:10]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_10}
    ${NVD} -a [gpu:11]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_11}
    ${NVD} -a [gpu:11]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_11}
fi

if [ $GPUS == 13 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
    ${NVD} -a [gpu:9]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_9}
    ${NVD} -a [gpu:9]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_9}
    ${NVD} -a [gpu:10]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_10}
    ${NVD} -a [gpu:10]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_10}
    ${NVD} -a [gpu:11]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_11}
    ${NVD} -a [gpu:11]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_11}
    ${NVD} -a [gpu:12]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_12}
    ${NVD} -a [gpu:12]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_12}
fi

if [ $GPUS == 14 ]
then
    ${NVD} -a [gpu:1]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_1}
    ${NVD} -a [gpu:1]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_1}
    ${NVD} -a [gpu:2]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_2}
    ${NVD} -a [gpu:2]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_2}
    ${NVD} -a [gpu:3]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_3}
    ${NVD} -a [gpu:3]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_3}
    ${NVD} -a [gpu:4]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_4}
    ${NVD} -a [gpu:4]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_4}
    ${NVD} -a [gpu:5]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_5}
    ${NVD} -a [gpu:5]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_5}
    ${NVD} -a [gpu:6]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_6}
    ${NVD} -a [gpu:6]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_6}
    ${NVD} -a [gpu:7]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_7}
    ${NVD} -a [gpu:7]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_7}
    ${NVD} -a [gpu:8]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_8}
    ${NVD} -a [gpu:8]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_8}
    ${NVD} -a [gpu:9]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_9}
    ${NVD} -a [gpu:9]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_9}
    ${NVD} -a [gpu:10]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_10}
    ${NVD} -a [gpu:10]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_10}
    ${NVD} -a [gpu:11]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_11}
    ${NVD} -a [gpu:11]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_11}
    ${NVD} -a [gpu:12]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_12}
    ${NVD} -a [gpu:12]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_12}
    ${NVD} -a [gpu:13]/GPUGraphicsClockOffset[${j}]=${__CORE_OVERCLOCK_13}
    ${NVD} -a [gpu:13]/GPUMemoryTransferRateOffset[${j}]=${MEMORY_OVERCLOCK_13}
fi
done

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $MANUAL_FAN == "YES" ]
then
    ${NVD} -a [gpu:0]/GPUFanControlState=1
    ${NVD} -a [fan:0]/GPUTargetFanSpeed=${FAN_SPEED}

if [ $GPUS == 2 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 3 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 4 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 5 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 6 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 7 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 8 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 9 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 10 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:9]/GPUFanControlState=1
    ${NVD} -a [fan:9]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 11 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:9]/GPUFanControlState=1
    ${NVD} -a [fan:9]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:10]/GPUFanControlState=1
    ${NVD} -a [fan:10]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 12 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:9]/GPUFanControlState=1
    ${NVD} -a [fan:9]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:10]/GPUFanControlState=1
    ${NVD} -a [fan:10]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:11]/GPUFanControlState=1
    ${NVD} -a [fan:11]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 13 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:9]/GPUFanControlState=1
    ${NVD} -a [fan:9]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:10]/GPUFanControlState=1
    ${NVD} -a [fan:10]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:11]/GPUFanControlState=1
    ${NVD} -a [fan:11]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:12]/GPUFanControlState=1
    ${NVD} -a [fan:12]/GPUTargetFanSpeed=${FAN_SPEED}
fi

if [ $GPUS == 14 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=1
    ${NVD} -a [fan:1]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:2]/GPUFanControlState=1
    ${NVD} -a [fan:2]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:3]/GPUFanControlState=1
    ${NVD} -a [fan:3]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:4]/GPUFanControlState=1
    ${NVD} -a [fan:4]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:5]/GPUFanControlState=1
    ${NVD} -a [fan:5]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:6]/GPUFanControlState=1
    ${NVD} -a [fan:6]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:7]/GPUFanControlState=1
    ${NVD} -a [fan:7]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:8]/GPUFanControlState=1
    ${NVD} -a [fan:8]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:9]/GPUFanControlState=1
    ${NVD} -a [fan:9]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:10]/GPUFanControlState=1
    ${NVD} -a [fan:10]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:11]/GPUFanControlState=1
    ${NVD} -a [fan:11]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:12]/GPUFanControlState=1
    ${NVD} -a [fan:12]/GPUTargetFanSpeed=${FAN_SPEED}
    ${NVD} -a [gpu:13]/GPUFanControlState=1
    ${NVD} -a [fan:13]/GPUTargetFanSpeed=${FAN_SPEED}
fi
fi

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $MANUAL_FAN == "NO" ]
then
    ${NVD} -a [gpu:0]/GPUFanControlState=0

if [ $GPUS == 2 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
fi

if [ $GPUS == 3 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
fi

if [ $GPUS == 4 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
fi

if [ $GPUS == 5 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
fi

if [ $GPUS == 6 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
fi

if [ $GPUS == 7 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
fi

if [ $GPUS == 8 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
fi

if [ $GPUS == 9 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
fi

if [ $GPUS == 10 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
    ${NVD} -a [gpu:9]/GPUFanControlState=0
fi

if [ $GPUS == 11 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
    ${NVD} -a [gpu:9]/GPUFanControlState=0
    ${NVD} -a [gpu:10]/GPUFanControlState=0
fi

if [ $GPUS == 12 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
    ${NVD} -a [gpu:9]/GPUFanControlState=0
    ${NVD} -a [gpu:10]/GPUFanControlState=0
    ${NVD} -a [gpu:11]/GPUFanControlState=0
fi
if [ $GPUS == 13 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
    ${NVD} -a [gpu:9]/GPUFanControlState=0
    ${NVD} -a [gpu:10]/GPUFanControlState=0
    ${NVD} -a [gpu:11]/GPUFanControlState=0
    ${NVD} -a [gpu:12]/GPUFanControlState=0
fi
if [ $GPUS == 14 ]
then
    ${NVD} -a [gpu:1]/GPUFanControlState=0
    ${NVD} -a [gpu:2]/GPUFanControlState=0
    ${NVD} -a [gpu:3]/GPUFanControlState=0
    ${NVD} -a [gpu:4]/GPUFanControlState=0
    ${NVD} -a [gpu:5]/GPUFanControlState=0
    ${NVD} -a [gpu:6]/GPUFanControlState=0
    ${NVD} -a [gpu:7]/GPUFanControlState=0
    ${NVD} -a [gpu:8]/GPUFanControlState=0
    ${NVD} -a [gpu:9]/GPUFanControlState=0
    ${NVD} -a [gpu:10]/GPUFanControlState=0
    ${NVD} -a [gpu:11]/GPUFanControlState=0
    ${NVD} -a [gpu:12]/GPUFanControlState=0
    ${NVD} -a [gpu:13]/GPUFanControlState=0
fi
fi

if [ $SLOW_USB_KEY_MODE == "YES" ]
then
sleep 6
fi

if [ $COIN == "NICE" ]
then

if [ $GENOILorCLAYMORE == "GENOIL" ]
then
HCD='/home/m1/eth/Genoil-U/ethminer'

NICEADDR="$BTC_ADDRESS.$NICE_WORKER"
until $HCD -SP 2 -S $GENOIL_NICE_POOL -O $NICEADDR:x -U
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $GENOILorCLAYMORE == "CLAYMORE" ]
then
if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

NICEADDR="$BTC_ADDRESS.$NICE_WORKER"

until $HCD -epool $NICE_POOL -ewal $NICEADDR -epsw x -esm 3 -allpools 1 -estale 0 -dbg -1 $NICE_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
fi

if [ $COIN == "ZEC" ]
then

if [ $EWBF_VERSION == "3_3" ]
then
HCD='/home/m1/zec/v3_3/miner'
fi

if [ $EWBF_VERSION == "3_4" ]
then
HCD='/home/m1/zec/v3_4/miner'
fi

ZECADDR="$ZEC_ADDRESS.$ZEC_WORKER"
until $HCD --eexit 3 --fee $EWBF_PERCENT --pec --server $ZEC_POOL --user $ZECADDR --pass z --port $ZEC_PORT;
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "ZCL" ]
then

if [ $EWBF_VERSION == "3_3" ]
then
HCD='/home/m1/zec/v3_3/miner'
fi

if [ $EWBF_VERSION == "3_4" ]
then
HCD='/home/m1/zec/v3_4/miner'
fi

ZCLADDR="$ZCL_ADDRESS.$ZCL_WORKER"
until $HCD --eexit 3 --fee $EWBF_PERCENT --pec --server $ZCL_POOL --user $ZCLADDR --pass z --port $ZCL_PORT;
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "ZEN" ]
then

if [ $EWBF_VERSION == "3_3" ]
then
HCD='/home/m1/zec/v3_3/miner'
fi

if [ $EWBF_VERSION == "3_4" ]
then
HCD='/home/m1/zec/v3_4/miner'
fi

ZENADDR="$ZEN_ADDRESS.$ZEN_WORKER"
until $HCD --eexit 3 --fee $EWBF_PERCENT --pec --server $ZEN_POOL --user $ZENADDR --pass z --port $ZEN_PORT;
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "HUSH" ]
then

if [ $EWBF_VERSION == "3_3" ]
then
HCD='/home/m1/zec/v3_3/miner'
fi

if [ $EWBF_VERSION == "3_4" ]
then
HCD='/home/m1/zec/v3_4/miner'
fi

HUSHADDR="$HUSH_ADDRESS.$HUSH_WORKER"
until $HCD --eexit 3 --fee $EWBF_PERCENT --pec --server $HUSH_POOL --user $HUSHADDR --pass z --port $HUSH_PORT;
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "ZCOIN" ]
then
HCD='/home/m1/TPccminer/ccminer'
ADDR="$ZCOIN_ADDRESS.$ZCOIN_WORKER"

until $HCD -a lyra2 -o $ZCOIN_POOL -u $ADDR -p x
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done

fi

if [ $COIN == "MONA" ]
then
HCD='/home/m1/SPccminer/ccminer'
ADDR="$MONA_ADDRESS.$MONA_WORKER"

until $HCD -a lyra2v2 -o $MONA_POOL -u $ADDR -p x
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "VTC" ]
then
HCD='/home/m1/SPccminer/ccminer'
ADDR="$VTC_ADDRESS.$VTC_WORKER"

if [ $VTC_AUTOCONVERT_TO_BTC == "YES" ]
then
ADDR="$BTC_ADDRESS.$VTC_WORKER"

until $HCD -a lyra2v2 -o $VTC_POOL -u $ADDR -p c=BTC
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $VTC_AUTOCONVERT_TO_BTC == "NO" ]
then

until $HCD -a lyra2v2 -o $VTC_POOL -u $ADDR -p c=VTC
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
fi

if [ $COIN == "DGB" ]
then
HCD='/home/m1/TPccminer/ccminer'
ADDR="$DGB_ADDRESS"

if [ $DGB_AUTOCONVERT_TO_BTC == "YES" ]
then
ADDR="$BTC_ADDRESS"
until $HCD -a skein -o $DGB_POOL -u $ADDR -p c=BTC -i $DGB_INTENSITY
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $DGB_AUTOCONVERT_TO_BTC == "NO" ]
then

until $HCD -a skein -o $DGB_POOL -u $ADDR -p c=DGB -i $DGB_INTENSITY
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
fi

if [ $COIN == "LBC" ]
then
HCD='/home/m1/SPccminer/ccminer'
ADDR="$LBC_ADDRESS.$LBC_WORKER"

until $HCD -a lbry -o $LBC_POOL -u $ADDR -p x
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "FTC" ]
then
HCD='/home/m1/SPccminer/ccminer'
ADDR="$FTC_ADDRESS.$FTC_WORKER"

until $HCD -a neoscrypt -o $FTC_POOL -u $ADDR -p x
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "ETC" ]
then

if [ $GENOILorCLAYMORE == "GENOIL" ]
then
HCD='/home/m1/eth/Genoil-U/ethminer'

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

until $HCD -S $ETC_POOL -O $ETCADDR:x -U
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $GENOILorCLAYMORE == "CLAYMORE" ]
then
if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

until $HCD -epool $ETC_POOL -ewal $ETCADDR -epsw x -mode 1 -dbg -1 $ETC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
fi

if [ $COIN == "EXP" ]
then

if [ $GENOILorCLAYMORE == "GENOIL-CURRENTLY-NOT-SUPPORTED" ]
then
HCD='/home/m1/eth/Genoil-U/ethminer'

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"
until $HCD -S $EXP_POOL -O $EXPADDR:x -U
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

#if [ $GENOILorCLAYMORE == "CLAYMORE" ]
#then
if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"

until $HCD -epool $EXP_POOL -ewal $EXPADDR -epsw x -mode 1 -allpools 1 -dbg -1 $EXP_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
#fi

if [ $COIN == "ETH" ]
then

if [ $GENOILorCLAYMORE == "GENOIL" ]
then
HCD='/home/m1/eth/Genoil-U/ethminer'

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

until $HCD -S $ETH_POOL -O $ETHADDR:x -U
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $GENOILorCLAYMORE == "CLAYMORE" ]
then
if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

until $HCD -epool $ETH_POOL -ewal $ETHADDR -epsw x -mode 1 -dbg -1 $ETH_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
fi

if [ $COIN == "MUSIC" ]
then

if [ $GENOILorCLAYMORE == "GENOIL-CURRENTLY-NOT-SUPPORTED" ]
then
HCD='/home/m1/eth/Genoil-U/ethminer'

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
until $HCD -S $MUSIC_POOL -O $MUSICADDR:x -U
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

#if [ $GENOILorCLAYMORE == "CLAYMORE" ]
#then
if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
until $HCD -epool $MUSIC_POOL -ewal $MUSICADDR -epsw x -mode 1 -allpools 1 -dbg -1 $MUSIC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
#fi

if [ $COIN == "DCR" ]
then
HCD='/home/m1/pasc/sgminer'
ADDR="$DCR_ADDRESS.$DCR_WORKER"
until $HCD -k decred -o $DCR_POOL -u $ADDR -p x -p x -I 21 -w 64 -g2
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "PASC" ]
then
HCD='/home/m1/pasc/sgminer'
ADDR="$PASC_ADDRESS..$PASC_WORKER"

until $HCD -k pascal -o $PASC_POOL -u $ADDR -p x -p x -I 21 -w 64 -g2
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "SIA" ]
then
HCD='/home/m1/SPccminer/ccminer'
SCADDR="$SC_ADDRESS/$SC_WORKER"

until $HCD -a sia -o $SC_GW_POOL -u $SCADDR -p x
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETC_DCR" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

DADDR="$DCR_ADDRESS.$DCR_WORKER"
until $HCD -epool $ETC_POOL -ewal $ETCADDR -epsw x -dpool $DCR_POOL -dwal $DADDR -dpsw x -dbg -1 $ETC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETC_PASC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

ADDR="$PASC_ADDRESS..$PASC_WORKER"
until $HCD -epool $ETC_POOL -ewal $ETCADDR -epsw x -dpool $PASC_POOL -dwal $ADDR -dpsw x -dcoin pasc -dbg -1 $ETC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETC_LBC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

ADDR="$LBC_ADDRESS.$LBC_WORKER"
until $HCD -epool $ETC_POOL -ewal $ETCADDR -epsw x -dpool $LBC_POOL -dwal $ADDR -dpsw x -dcoin lbc -dbg -1 $ETC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETC_SC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETCADDR="$ETC_ADDRESS/$ETC_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETCADDR="$ETC_ADDRESS.$ETC_WORKER"
fi

SCADDR="$SC_ADDRESS/$SC_WORKER"
until $HCD -epool $ETC_POOL -ewal $ETCADDR -epsw x -allpools 1 -dpool $SC_POOL -dwal $SCADDR -dpsw x -dcoin sc -dcri 70 -dbg -1 $ETC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_EXP_DCR" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"
DADDR="$DCR_ADDRESS.$DCR_WORKER"
until $HCD -epool $EXP_POOL -ewal $EXPADDR -epsw x -allpools 1 -dpool $DCR_POOL -dwal $DADDR -dpsw x $EXP_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_EXP_PASC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"
ADDR="$PASC_ADDRESS..$PASC_WORKER"
until $HCD -epool $EXP_POOL -ewal $EXPADDR -epsw x -allpools 1 -dpool $PASC_POOL -dwal $ADDR -dpsw x -dcoin pasc -dbg -1 $EXP_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_EXP_LBC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"
ADDR="$LBC_ADDRESS.$LBC_WORKER"
until $HCD -epool $EXP_POOL -ewal $EXPADDR -epsw x -allpools 1 -dpool $LBC_POOL -dwal $ADDR -dpsw x -dcoin lbc -dbg -1 $EXP_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_EXP_SC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

EXPADDR="$EXP_ADDRESS/$EXP_WORKER"
SCADDR="$SC_ADDRESS/$SC_WORKER"
until $HCD -epool $EXP_POOL -ewal $EXPADDR -epsw x -allpools 1 -dpool $SC_POOL -dwal $SCADDR -dpsw x -dcoin sc -dcri 70 -dbg -1 $EXP_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_MUSIC_DCR" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
DADDR="$DCR_ADDRESS.$DCR_WORKER"
until $HCD -epool $MUSIC_POOL -ewal $MUSICADDR -epsw x -allpools 1 -dpool $DCR_POOL -dwal $DADDR -dpsw x -dbg -1 $MUSIC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_MUSIC_PASC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
ADDR="$PASC_ADDRESS..$PASC_WORKER"
until $HCD -epool $MUSIC_POOL -ewal $MUSICADDR -epsw x -allpools 1 -dpool $PASC_POOL -dwal $ADDR -dpsw x -dcoin pasc -dbg -1 $MUSIC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_MUSIC_LBC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
ADDR="$LBC_ADDRESS.$LBC_WORKER"
until $HCD -epool $MUSIC_POOL -ewal $MUSICADDR -epsw x -allpools 1 -dpool $LBC_POOL -dwal $ADDR -dpsw x -dcoin lbc -dbg -1 $MUSIC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_MUSIC_SC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

MUSICADDR="$MUSIC_ADDRESS/$MUSIC_WORKER"
SCADDR="$SC_ADDRESS/$SC_WORKER"
until $HCD -epool $MUSIC_POOL -ewal $MUSICADDR -epsw x -allpools 1 -dpool $SC_POOL -dwal $SCADDR -dpsw x -dcoin sc -dcri 70 -dbg -1 $MUSIC_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETH_DCR" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

DADDR="$DCR_ADDRESS.$DCR_WORKER"
until $HCD -epool $ETH_POOL -ewal $ETHADDR -epsw x -dpool $DCR_POOL -dwal $DADDR -dpsw x -dbg -1 $ETH_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETH_PASC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

ADDR="$PASC_ADDRESS..$PASC_WORKER"
until $HCD -epool $ETH_POOL -ewal $ETHADDR -epsw x -dpool $PASC_POOL -dwal $ADDR -dpsw x -dcoin pasc -dbg -1 $ETH_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETH_LBC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

ADDR="$LBC_ADDRESS.$LBC_WORKER"
until $HCD -epool $ETH_POOL -ewal $ETHADDR -epsw x -dpool $LBC_POOL -dwal $ADDR -dpsw x -dcoin lbc -dbg -1 $ETH_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi

if [ $COIN == "DUAL_ETH_SC" ]
then

if [ $CLAYMORE_VERSION == "9_5" ]
then
HCD='/home/m1/eth/9_5/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "9_4" ]
then
HCD='/home/m1/eth/9_4/ethdcrminer64'
fi

if [ $CLAYMORE_VERSION == "8_0" ]
then
HCD='/home/m1/eth/8_0/ethdcrminer64'
fi

ETHADDR="$ETH_ADDRESS/$ETH_WORKER"

if [ $ETHERMINEdotORG == "YES" ]
then
ETHADDR="$ETH_ADDRESS.$ETH_WORKER"
fi

SCADDR="$SC_ADDRESS/$SC_WORKER"
until $HCD -epool $ETH_POOL -ewal $ETHADDR -epsw x -allpools 1 -dpool $SC_POOL -dwal $SCADDR -dpsw x -dcoin sc -dcri 70 -dbg -1 $ETH_EXTENTION_ARGUMENTS
   do
   echo "FAILURE; reinit in 5" >&2
   sleep 5
done
fi
